import { useState, useEffect, useMemo } from "react"; 
import MenuNameCard from "../../components/MainCardOption/MenuNameCard";
import FilterCard from "../../components/FilterCard";
import Cardno2 from "../../components/Cardno2";
import Cardno5 from "../../components/Cardno5";
import Modal from "../../components/ModalForm/Modal";
import AddUserForm from "../../components/ModalForm/AddUserForm";
import axios from "axios";

const initialFilters = {
    search: '', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    role: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role (option2Name)
    status: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status (option1Name)
};


function UserManagement(){

    const [userData, setUserData] = useState([]);

    const [filters, setFilters] = useState(initialFilters);

    const [isModalOpen, setIsModalOpen] = useState(false);
    const handleOpenModal = () => setIsModalOpen(true);
    const handleCloseModal = () => setIsModalOpen(false);

    const [loading, setLoading] = useState(true);

    const fetchUserData = async () => {
        try {
            const userPromise = await axios.get("http://localhost:8080/users");
            
            const [userRes] = await Promise.all([
                userPromise, 
            ]);
            setUserData(userRes.data);
            
        } catch (error) {
            console.error("Error fetching user data:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUserData();
    }, []); 
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô


    // ‡∏£‡∏∞‡∏ö‡∏ö filter
    const handleFilterChange = (key, value) => {
        setFilters(prev => ({
            ...prev,
            [key]: value
        }));
    };

    const handleClearFilters = () => {
        setFilters(initialFilters);
    };

    const filteredUsers = useMemo(() => {
        const { search, role, status } = filters;
        let data = userData;

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search)
        if (search) {
            const lowerSearch = search.toLowerCase();
            data = data.filter(user => (
                // üí° FIX 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user.username ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å .toLowerCase()
            (user.name && user.name.toLowerCase().includes(lowerSearch)) ||
                // ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email
            (user.email && user.email.toLowerCase().includes(lowerSearch)) ||

                // ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö phone ‡∏î‡πâ‡∏ß‡∏¢ ‡∏´‡∏≤‡∏Å phone ‡πÄ‡∏õ‡πá‡∏ô string
                // (user.phone && user.phone.includes(lowerSearch))
                // ‡∏´‡∏≤‡∏Å user.phone ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà undefined/null ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            (user.phone && String(user.phone).includes(lowerSearch))));
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role)
        if (role && role !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
            data = data.filter(user => user.role === role);
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Status) - *‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Key 'status' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user*
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ Key 'status' (Active/Inactive)
        if (status && status !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
            data = data.filter(user => user.status === status);
        }

        return data;
    }, [userData, filters]);
    // ‡∏£‡∏∞‡∏ö‡∏ö filter

    // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≥‡∏ß‡∏ô Role
        const roleCountsObject = userData.reduce((acc, user) => {
        const role = user.role;
        acc[role] = (acc[role] || 0) + 1;
        return acc;
    }, {});

    const staffDataList = Object.entries(roleCountsObject).map(([roleName, count]) => {
        return {
            name: roleName,
            value: count
        };
    })

    const totalStaffObjects= {name:"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value:userData.length}

    const staffData=[
        totalStaffObjects,
        ...staffDataList
    ]

    // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≥‡∏ß‡∏ô Role
    
    if (loading) {
        return <div className="mx-5 mt-10 text-center text-xl">Loading Dashboard...</div>;
    }

    return(
        <>
            <div className="mx-5">
                <MenuNameCard
                title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
                onButtonClick={handleOpenModal} // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Prop ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô MenuNameCard
                detail={false}
                buttonText="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"/>

                <Cardno2 data={staffData}/>

                <FilterCard
                    name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    placeholderName=" ‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                    option1Name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                    option2Name="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
                    // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
                    filters={filters}
                    onFilterChange={handleFilterChange}
                    onClear={handleClearFilters}
                    option2Key="role"
                />
                <Cardno5 data={filteredUsers}/> 
            </div>

            <Modal 
                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" 
                isOpen={isModalOpen}
                onClose={handleCloseModal}>

                <AddUserForm 
                onClose={handleCloseModal} 
                onSaveSuccess={fetchUserData}/>
            </Modal>


        </>
    );
}

export default UserManagement;