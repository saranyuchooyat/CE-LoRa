import { useState, useEffect} from "react"; 
import api from "../../components/API";
import MenuNameCard from "../../components/MainCardOption/MenuNameCard";
import CardFilter from "../../components/CardFilter";
import Cardno2 from "../../components/Cardno2";
import CardLayouts from "../../components/CardLayouts";

function DeviceManagement(){

    const [deviceData, setDeviceData]= useState([]);
    // const [filters, setFilters] = useState(initialFilters);
    const [loading, setLoading] = useState(true);

    //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô
    const fetchDeviceData = async () => {
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Token ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô LocalStorage ‡πÅ‡∏•‡πâ‡∏ß
        const tokenInStorage = localStorage.getItem('token');
        const tokenInState = location.state?.token;

        if (!tokenInStorage && !tokenInState) {
            console.error("No authentication context found. Please log in.");
            setLoading(false);
            return;
        }

        // 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Token ‡πÉ‡∏ô Storage ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å state ‡∏´‡∏£‡∏∑‡∏≠ Refresh) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        try {
            setLoading(true);
            
            // üí° ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Promise.all ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß)
            const [deviceRes] = await Promise.all([
                api.get('/devices'),
            ]);
            setDeviceData(deviceRes.data);

        } catch (error) {
            console.error("Error fetching device data:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        const tokenInStorage = localStorage.getItem('token');

        // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡∏à‡∏≤‡∏Å State ‡∏•‡∏á Storage ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Login
        if (location.state?.token && location.state.token !== tokenInStorage) {
             localStorage.setItem('token', location.state.token);
             // üí° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchZoneData ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
             // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ Component ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ dependency (location.state) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
        }

        // üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Token
        fetchDeviceData(); 
        
    }, [location.state]);
    //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô

    console.log("Device:",deviceData)

    // //‡∏£‡∏∞‡∏ö‡∏ö filter
    // const handleFilterChange = (key, value) => {
    //     setFilters(prev => ({
    //         ...prev,
    //         [key]: value
    //     }));
    // };

    // const handleClearFilters = () => {
    //     setFilters(initialFilters);
    // };

    // const filteredZones = useMemo(() => {
    //     const { search, province, status } = filters;
    //     let data = zoneData;

    //     // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search)
    //     if (search) {
    //         const lowerSearch = search.toLowerCase();
    //         data = data.filter(zone => {
                
    //             // 1. ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡∏Å‡πà‡∏≠‡∏ô)
    //             const zoneIdSearch = zone.zoneid ? String(zone.zoneid).includes(lowerSearch) : false;
                
    //             // 2. ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toLowerCase)
    //             const nameSearch = zone.zonename && zone.zonename.toLowerCase().includes(lowerSearch);
    //             const addressSearch = zone.address && zone.address.toLowerCase().includes(lowerSearch);

    //             // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    //             return zoneIdSearch || nameSearch || addressSearch;
    //         });
    //     }

    //     if (province && province !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
    //         data = data.filter(zone => zone.Province === province);
    //     }

    //     if (status && status !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
    //         data = data.filter(zone => zone.Status === status);
    //     }  

    //     return data;
    // }, [zoneData, filters]);
    // //‡∏£‡∏∞‡∏ö‡∏ö filter

    //‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const deviceStatusCount = deviceData.reduce((acc,device) => {
    const status = device.status;
    acc[status] = (acc[status] || 0)+1;
    console.log("acc",acc)
    return acc
    }, {});

    const deviceStatusList = Object.entries(deviceStatusCount).map(([status, count]) => {
        return {
            name: status, 
            value: count
        }
        
    })

    const totalDevicesObject = {name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: deviceData.length}

    const deviceStatusData = [
        totalDevicesObject,
        ...deviceStatusList
    ];
    //‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

    

    if (loading) {
        return <div className="mx-5 mt-10 text-center text-xl">Loading Dashboard...</div>;
    }

    return(
        <>
            <div className="mx-5">
                <MenuNameCard
                title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Smart Healthcare ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"
                description=""
                onButtonClick="A"
                detail={false}
                buttonText="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà"/>
                
                <Cardno2 data={deviceStatusData}/>

                <CardFilter
                name="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                placeholderName="‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                option1Name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                option2Name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                // filters={filters}
                // onFilterChange={handleFilterChange}
                // onClear={handleClearFilters}
                filters={false}
                onFilterChange={false}
                onClear={false}
                option2Key="province"
                />

                <CardLayouts
                name="device"
                data={deviceData}/>

            </div>

        </>
    );

}

export default DeviceManagement;