import { useState, useEffect, useMemo} from "react";
import { useLocation } from "react-router-dom";
import { useQueries } from "@tanstack/react-query";
import api from "../../components/API";
import MenuNameCard from "../../components/MainCardOption/MenuNameCard";
import CardFilter from "../../components/CardFilter";
import Cardno2 from "../../components/Cardno2";
import CardLayouts from "../../components/CardLayouts";

const initialFilters = {
    search: '', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    role: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role (option2Name)
    status: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status (option1Name)
};

function DeviceManagement(){

    const location = useLocation();
    const [filters, setFilters] = useState(initialFilters);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const handleOpenModal = () => setIsModalOpen(true);
    const handleCloseModal = () => setIsModalOpen(false);

    //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô
    const deviceQueries = useQueries({
        queries: [
        { queryKey: ['devices'], queryFn: () => api.get('/devices').then(res => res.data) },
        ],
    });

    const isSystemLoading = deviceQueries.some(query => query.isLoading);
    const isSystemError = deviceQueries.some(query => query.isError);

    useEffect(() => {
        const tokenInStorage = localStorage.getItem('token');
        if (location.state?.token && location.state.token !== tokenInStorage) {
            localStorage.setItem('token', location.state.token);
            // üí° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß React Query ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Refetch ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Query ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å Trigger ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Token ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞ Component Rerender
        }
    }, [location.state]);

    const deviceQueryResult = deviceQueries[0];
    //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô


    //‡∏£‡∏∞‡∏ö‡∏ö filter
        const handleFilterChange = (key, value) => {
            setFilters((prev) => ({
            ...prev,
            [key]: value,
            }));
        };
    
        const handleClearFilters = () => {
            setFilters(initialFilters);
        };
    
        const filteredDevices = useMemo(() => {
            const { search, province, status } = filters;
            let data = deviceQueryResult.data || []; 
    
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search)
            if (search) {
            const lowerSearch = search.toLowerCase();
            data = data.filter((device) => {
                // 1. ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡∏Å‡πà‡∏≠‡∏ô)
                const deviceIdSearch = device.device_id
                ? String(device.device_id).includes(lowerSearch)
                : false;
    
                // 2. ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô null/undefined ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toLowerCase)
                const modelSearch =
                device.model && device.model.toLowerCase().includes(lowerSearch);
                const addressSearch =
                device.address && device.address.toLowerCase().includes(lowerSearch);
    
                // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                return deviceIdSearch || modelSearch || addressSearch;
            });
            }
    
            if (province && province !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
            data = data.filter((device) => device.Province === province);
            }
    
            if (status && status !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
            data = data.filter((device) => device.Status === status);
            }
    
            return data;
        }, [deviceQueryResult.data, filters]);
        //‡∏£‡∏∞‡∏ö‡∏ö filter

    //‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const deviceStatusCount = (deviceQueryResult.data || []).reduce((acc, device) => {
    const status = device.status;
    acc[status] = (acc[status] || 0)+1;
    console.log("acc",acc)
    return acc
    }, {});

    const deviceStatusList = Object.entries(deviceStatusCount).map(([status, count]) => {
        return {
            name: status, 
            value: count
        }
        
    })

    const totalDevicesObject = {name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: deviceQueries.length}

    const deviceStatusData = [
        totalDevicesObject,
        ...deviceStatusList
    ];
    //‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

    if (isSystemLoading) {
        return <div className="mx-5 mt-10 text-center text-xl">Loading Dashboard...</div>;
    }
        
    if (isSystemError) {
        return <div className="mx-5 mt-10 text-center text-xl text-red-600">Error fetching data!</div>;
    }

    return(
        <>
            <div className="mx-5">
                <MenuNameCard
                title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Smart Healthcare ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"
                description=""
                onButtonClick="A"
                detail={false}
                buttonText="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà"/>
                
                <Cardno2 data={deviceStatusData}/>

                <CardFilter
                name="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                placeholderName="‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                option1Name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                option2Name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                filters={filters}
                onFilterChange={handleFilterChange}
                onClear={handleClearFilters}
                option2Key="province"
                />

                <CardLayouts
                name="device"
                data={filteredDevices}/>

            </div>

        </>
    );

}

export default DeviceManagement;